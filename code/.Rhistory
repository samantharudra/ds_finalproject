formula <- as.formula(paste("social_media_usage_", platform, "_bl ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data %>% filter(nationality == 1))
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(platform = platform, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[platform]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Platform", "N_obs"),
caption = "Regression Results for Social Media Usage by Platform")
# Colombians
# List of social media platforms to analyze
platforms <- c("facebook", "whatsapp", "twitter", "instagram", "tiktok")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each platform and perform regression analysis
for (platform in platforms) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste("social_media_usage_", platform, "_bl ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data %>% filter(nationality == 0))
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(platform = platform, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[platform]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Platform", "N_obs"),
caption = "Regression Results for Social Media Usage by Platform")
# Overall sample
# List of variables to analyze
vars <- c("trust_gob_bl", "trust_social_media_bl", "trust_ngo_bl", "trust_traditional_media_bl")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
" + nationality + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data)
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Regression Results for Political Outcomes")
# Overall sample
# List of variables to analyze
vars <- c("democracy_1_bl", "democracy_2_bl")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
" + nationality + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data)
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Regression Results for Political Outcomes")
# Venezuelans
# List of variables to analyze
vars <- c("trust_gob_bl", "trust_social_media_bl", "trust_ngo_bl", "trust_traditional_media_bl")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
" + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data %>% filter(nationality == 1))
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Regression Results for Political Outcomes")
# Venezuelans
# List of variables to analyze
vars <- c("democracy_1_bl", "democracy_2_bl")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
" + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data %>% filter(nationality == 1))
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Regression Results for Political Outcomes")
# Colombians
# List of variables to analyze
vars <- c("trust_gob_bl", "trust_social_media_bl", "trust_ngo_bl", "trust_traditional_media_bl")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
" + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data %>% filter(nationality == 0))
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Regression Results for Political Outcomes")
# Colombians
# List of variables to analyze
vars <- c("democracy_1_bl", "democracy_2_bl")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
" + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data %>% filter(nationality == 0))
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Regression Results for Political Outcomes")
# Outsider Beliefs
describe_all(clean_numeric_data, c("outsider_base_bl"))
clean_numeric_data %>%
filter(nationality == 1) %>%
ggplot(aes(x=outsider_base_bl)) +
geom_histogram()
ggsave("outsider_histogram.png")
# Venezuelans
# List of variables to analyze
vars <- c("outsider_base_bl")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
" + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl + ",
"ven_contact_bl + ven_friend_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data %>% filter(nationality == 1))
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Regression Results for Outsider Sentiment")
# create var for US
clean_numeric_data = clean_numeric_data %>%
mutate(migra_2_bl_US = as.numeric(migra_2_bl == 1))
# List of variables to analyze
vars <- c("migra_1_bl", "migra_2_bl_US")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl",
" + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl + ",
"ven_contact_bl + ven_friend_bl + outsider_base_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data %>% filter(nationality == 1))
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Regression Results for Desire to Move")
clean_numeric_data %>%
filter(nationality == 1) %>%
ggplot(aes(x=migra_2_bl)) +
geom_histogram() +
scale_x_continuous(
breaks = c(1, 3, 4, 5, 6, 7, 8),
labels = c("US", "Costa Rica", "Spain", "Canada", "Venezuela", "LatAm", "Other")
) +
labs(x = "Country", y = "Count")
ggsave("country_histogram.png")
# Required library
library(ggplot2)
library(dplyr)
# Mapping of countries to their numeric codes
country_labels <- c("US", "Costa Rica", "Spain", "Canada", "Venezuela", "LatAm", "Other")
# Create a filtered dataset to include only relevant variables and label countries
demographic_data <- clean_numeric_data %>%
filter(!is.na(migra_2_bl)) %>%
mutate(
country = factor(migra_2_bl, levels = c(1, 3, 4, 5, 6, 7, 8), labels = country_labels)
)
# Create plots for each demographic variable
# 1. Age distribution by country
age_plot <- demographic_data %>%
ggplot(aes(x = country, y = age_sisben, fill = country)) +
geom_boxplot() +
labs(title = "Age Distribution by Country", x = "Country", y = "Age") +
theme_minimal()
# 2. Gender distribution by country
sex_plot <- demographic_data %>%
ggplot(aes(x = country, fill = factor(sex_sisben))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("#1f78b4", "#33a02c"), name = "Sex", labels = c("Male", "Female")) +
labs(title = "Gender Distribution by Country", x = "Country", y = "Proportion") +
theme_minimal()
# 3. Group distribution by country
group_plot <- demographic_data %>%
ggplot(aes(x = country, fill = factor(group_sisben))) +
geom_bar(position = "fill") +
labs(title = "Group Distribution by Country", x = "Country", y = "Proportion", fill = "Group") +
theme_minimal()
# 4. Education level by country
education_plot <- demographic_data %>%
ggplot(aes(x = country, fill = factor(education_lvl_sisben))) +
geom_bar(position = "fill") +
labs(title = "Education Level by Country", x = "Country", y = "Proportion", fill = "Education Level") +
theme_minimal()
# 5. Ideology by country
ideology_plot <- demographic_data %>%
ggplot(aes(x = country, y = ideology_bl, fill = country)) +
geom_boxplot() +
labs(title = "Ideology by Country", x = "Country", y = "Ideology (Scale)") +
theme_minimal()
# Save the combined plot as an image
# ggsave("demographics_by_country.png", combined_plot, width = 14, height = 10)
ggsave("education_by_country.png", education_plot)
ggsave("age_by_country.png", age_plot)
ggsave("sex_by_country.png", sex_plot)
ggsave("ideology_by_country.png", ideology_plot)
ggsave("sisben_by_country.png", group_plot)
clean_numeric_data %>%
ggplot(aes(x=darien_bl)) +
geom_histogram()
library(ggplot2)
library(dplyr)
# Define the labels for darien_bl and nationality
darien_labels <- c(
"1" = "Never heard of",
"2" = "Heard of but don't know much",
"3" = "I know a little about it",
"4" = "Know quite a bit",
"5" = "Know a lot"
)
nationality_labels <- c(
"0" = "Colombians",
"1" = "Venezuelans"
)
# Generate the plot
clean_numeric_data %>%
group_by(nationality) %>%
mutate(mean_darien_bl = mean(darien_bl, na.rm = TRUE)) %>%
ggplot(aes(x = factor(darien_bl, levels = 1:5, labels = darien_labels))) +
geom_histogram(stat = "count", fill = "skyblue", color = "black") +
geom_vline(aes(xintercept = mean_darien_bl), color = "red", linetype = "dashed") +
facet_wrap(~factor(nationality, levels = 0:1, labels = nationality_labels)) +
labs(
title = "Distribution of Darien_BL by Nationality",
x = "Darien_BL Knowledge Levels",
y = "Count"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 12)
)
ggsave("darien_knowledge.png")
# List of variables to analyze
vars <- c("darien_bl", "belief_migrate_1_bl", "belief_migrate_2_bl", "difficulty_bl")
# Create an empty list to store the regression results
results_list <- list()
# Loop through each var and perform regression analysis
for (var in vars) {
# Dynamically construct the formula for the regression
formula <- as.formula(paste(var, " ~ ",
"age_sisben + group_sisben + ",
"sex_sisben + education_lvl_sisben + ideology_bl + nationality",
" + social_media_usage_facebook_bl + ",
"social_media_usage_whatsapp_bl + social_media_usage_twitter_bl + ",
"social_media_usage_instagram_bl + social_media_usage_tiktok_bl",
sep = ""))
# Perform the regression
model <- lm(formula, data = clean_numeric_data)
# Extract the summary using the broom package
results <- tidy(model) %>%
select(term, estimate, std.error, p.value) %>%
mutate(var = var, n_obs = nobs(model))  # Add a column to identify the platform
# Store the results in the list
results_list[[var]] <- results
}
# Combine all the results into a single data frame
combined_results <- bind_rows(results_list)
# Display the results in a table format using knitr::kable
kable(combined_results,
col.names = c("Variable", "Coefficient", "Std. Error", "P-value", "Dep Var", "N_obs"),
caption = "Darien and Perceptions of Migration Regressions")
# Load packages used in this session of R
library(tidyverse)
library(knitr)
summary(lm(english_diff ~ treatment + NumberofSchools + DistrictEnrollment + PercentofGiftedStudents + CharterSchoolEnrollment + GeographicSizeofDistrict + AmericanIndian_AlaskanNative + Asian + NativeHawaiianorotherPacificIslander + Black + Hispanic + White + TwoOrMoreRaces + EconomicallyDisadvantaged + EnglishLearner + SpecialEducation + Female + Male + Homeless + MilitaryConnected + perc_unconnected_students + Latitude + Longitude, data = data))
# Load packages used in this session of R
library(tidyverse)
library(knitr)
data = read.csv(file = "../data/cleaned data/merged_data.csv")
data = drop_na(data)
df["english_diff"] = df["mean_proficient_english_2022"] - df["mean_proficient_english_2019"]
df["english_diff"] = df["mean_proficient_english_2022"] - df["mean_proficient_english_2019"]
# Load packages used in this session of R
library(tidyverse)
library(knitr)
data = read.csv(file = "../data/cleaned data/merged_data.csv")
data = drop_na(data)
df["english_diff"] = df["mean_proficient_english_2022"] - df["mean_proficient_english_2019"]
data = data %>%
mutate(english_diff = mean_proficient_english_2022 - mean_proficient_english_2019,
math_diff = mean_proficient_math_2022 - mean_proficient_math_2019,
treatment = as.numeric(In_Person > median(In_Person)))
summary(lm(english_diff ~ treatment + NumberofSchools + DistrictEnrollment + PercentofGiftedStudents + CharterSchoolEnrollment + GeographicSizeofDistrict + AmericanIndian_AlaskanNative + Asian + NativeHawaiianorotherPacificIslander + Black + Hispanic + White + TwoOrMoreRaces + EconomicallyDisadvantaged + EnglishLearner + SpecialEducation + Female + Male + Homeless + MilitaryConnected + perc_unconnected_students + Latitude + Longitude, data = data))
# Load packages used in this session of R
library(tidyverse)
library(knitr)
library(readxl) # Package to read Excel data
library(MatchIt)
data = read.csv(file = "../data/cleaned data/merged_data.csv")
data = drop_na(data)
data = data %>%
mutate(treatment = as.numeric(In_Person > median(In_Person)))
matchit_result <- MatchIt::matchit(
treatment ~ NumberofSchools +
DistrictEnrollment +
PercentofGiftedStudents +
CharterSchoolEnrollment +
GeographicSizeofDistrict +
AmericanIndian_AlaskanNative +
Asian +
NativeHawaiianorotherPacificIslander +
Black +
Hispanic +
White +
TwoOrMoreRaces +
EconomicallyDisadvantaged +
EnglishLearner +
SpecialEducation +
Female +
Male +
Homeless +
MilitaryConnected +
perc_unconnected_students +
Latitude +
Longitude,
data = data,
method = "nearest"
)
print(matchit_result)
plot(summary(matchit_result))
plot(matchit_result, type = "ecdf")
summary(matchit_result)
sum = summary(matchit_result)
View(sum)
sum = summary(matchit_result)
sum$sum.matched
sum = summary(matchit_result)
sum$sum.matched
plot(summary(matchit_result))
png("../figures/matching_smd_plot.png")
pwd
cwd
setwd("~/Documents/datasci1/ds_finalproject/code")
plot(summary(matchit_result))
png("../figures/matching_smd_plot.png")
?png
# Generate the SMD plot and save it as a PNG
png("../figures/matching_smd_plot.png", width = 800, height = 600, res = 300) # Adjust dimensions and resolution for high quality
plot(summary(matchit_result)) # Create the plot
dev.off() # Close the graphics device
# Generate the SMD plot and save it as a PNG
png("../figures/matching_smd_plot.png") # Adjust dimensions and resolution for high quality
plot(summary(matchit_result)) # Create the plot
dev.off() # Close the graphics device
# Generate the SMD plot and save it as a PNG
png("../figures/matching_smd_plot.png", res = 300) # Adjust dimensions and resolution for high quality
plot(summary(matchit_result)) # Create the plot
# Generate the SMD plot and save it as a PNG
png("../figures/matching_smd_plot.png") # Adjust dimensions and resolution for high quality
plot(summary(matchit_result)) # Create the plot
dev.off() # Close the graphics device
