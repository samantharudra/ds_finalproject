clean_numeric_data %>%
filter(!is.na(migra_2_bl)) %>%
group_by(migra_2_bl) %>%
summarize(total = n(),
percent = n() / total_rows * 100)
country_migration = clean_numeric_data %>%
group_by(migra_2_bl) %>%
filter(!is.na(migra_2_bl)) %>%
summarize(total_responses = n(),
percent_female = sum(sex_sisben == 1) / total_responses * 100,
percent_male = 100 - percent_female,
percent_edu_1 = sum(education_lvl_sisben == 1) / total_responses * 100,
percent_edu_2 = sum(education_lvl_sisben == 2) / total_responses * 100,
percent_edu_3 = sum(education_lvl_sisben == 3) / total_responses * 100,
percent_edu_4 = sum(education_lvl_sisben == 4) / total_responses * 100,
percent_edu_5 = sum(education_lvl_sisben == 5) / total_responses * 100,
percent_edu_6 = sum(education_lvl_sisben == 6) / total_responses * 100,
percent_edu_7 = sum(education_lvl_sisben == 7) / total_responses * 100,
percent_edu_8 = sum(education_lvl_sisben == 8) / total_responses * 100,
percent_extreme_poverty = sum(group_sisben == 1) / total_responses * 100,
percent_moderate_poverty = sum(group_sisben == 2) / total_responses * 100,
percent_vulnerable = sum(group_sisben == 3) / total_responses * 100,
percent_no_poverty = sum(group_sisben == 4) / total_responses * 100,
)
country_migration
country_migration_long <- country_migration %>%
pivot_longer(cols = starts_with("percent_edu"),
names_to = "education_level",
values_to = "percentage") %>%
mutate(education_level = factor(education_level, levels = paste0("percent_edu_", 1:8),
labels = paste("Edu ", 1:8)))
country_migration_long
ggplot(country_migration_long, aes(x = education_level, y = percentage, fill = education_level)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ migra_2_bl, scales = "free_x", nrow = 2) +
labs(x = "Education Level", y = "Percentage", title = "Education Level Distribution by Migration Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
country_migration_education = clean_numeric_data %>%
group_by(education_lvl_sisben) %>%
filter(!is.na(migra_2_bl)) %>%
summarize(total_respondents = n(),
percent_migra_1 = sum(migra_2_bl == 1) / total_respondents * 100,
percent_migra_3 = sum(migra_2_bl == 3) / total_respondents * 100,
percent_migra_4 = sum(migra_2_bl == 4) / total_respondents * 100,
percent_migra_5 = sum(migra_2_bl == 5) / total_respondents * 100,
percent_migra_6 = sum(migra_2_bl == 6) / total_respondents * 100,
percent_migra_7 = sum(migra_2_bl == 7) / total_respondents * 100,
percent_migra_8 = sum(migra_2_bl == 8) / total_respondents * 100,
)
country_migration_education
country_migration_education_long <- country_migration_education %>%
pivot_longer(
cols = starts_with("percent_migra"),
names_to = "migra_category",
values_to = "percentage"
)
# Plot the bar chart
ggplot(country_migration_education_long, aes(x = migra_category, y = percentage, fill = migra_category)) +
geom_bar(stat = "identity") +
facet_wrap(~ education_lvl_sisben, nrow = 1) +
labs(
title = "Percentage of Each Migra Category by Education Level",
x = "Migra Category",
y = "Percentage",
fill = "Migra Category"
) +
theme_minimal() +
theme(axis.text.x = element_blank())
# Pivot data to long format for poverty group percentages
country_migration_poverty_long <- country_migration %>%
pivot_longer(cols = starts_with("percent_"),
names_to = "poverty_group",
values_to = "percentage") %>%
# Filter to include only poverty-related columns
filter(poverty_group %in% c("percent_extreme_poverty", "percent_moderate_poverty",
"percent_vulnerable", "percent_no_poverty")) %>%
mutate(poverty_group = factor(poverty_group,
levels = c("percent_extreme_poverty", "percent_moderate_poverty",
"percent_vulnerable", "percent_no_poverty"),
labels = c("Extreme Poverty", "Moderate Poverty",
"Vulnerable", "No Poverty")))
# Create bar plot for each 'migra_2_bl' category for poverty groups
# Assuming 'country_migration' already contains the summarized poverty group percentages.
# Pivot data to long format for poverty group percentages
country_migration_poverty_long <- country_migration %>%
pivot_longer(cols = starts_with("percent_"),
names_to = "poverty_group",
values_to = "percentage") %>%
# Filter to include only poverty-related columns
filter(poverty_group %in% c("percent_extreme_poverty", "percent_moderate_poverty",
"percent_vulnerable", "percent_no_poverty")) %>%
mutate(poverty_group = factor(poverty_group,
levels = c("percent_extreme_poverty", "percent_moderate_poverty",
"percent_vulnerable", "percent_no_poverty"),
labels = c("Extreme Poverty", "Moderate Poverty",
"Vulnerable", "No Poverty")))
# Create bar plot for each 'migra_2_bl' category for poverty groups
ggplot(country_migration_poverty_long, aes(x = poverty_group, y = percentage, fill = poverty_group)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ migra_2_bl, scales = "free_x", nrow = 1) +
labs(x = "Poverty Group", y = "Percentage", title = "Poverty Group Distribution by Migration Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Pastel1")
country_poverty_migration = clean_numeric_data %>%
group_by(group_sisben) %>%
filter(!is.na(migra_2_bl)) %>%
summarize(total_respondents = n(),
percent_migra_1 = sum(migra_2_bl == 1) / total_respondents * 100,
percent_migra_3 = sum(migra_2_bl == 3) / total_respondents * 100,
percent_migra_4 = sum(migra_2_bl == 4) / total_respondents * 100,
percent_migra_5 = sum(migra_2_bl == 5) / total_respondents * 100,
percent_migra_6 = sum(migra_2_bl == 6) / total_respondents * 100,
percent_migra_7 = sum(migra_2_bl == 7) / total_respondents * 100,
percent_migra_8 = sum(migra_2_bl == 8) / total_respondents * 100,
)
country_poverty_migration
country_poverty_migration_long <- country_poverty_migration %>%
pivot_longer(
cols = starts_with("percent_migra"),
names_to = "migra_category",
values_to = "percentage"
)
# Plot the bar chart
ggplot(country_poverty_migration_long, aes(x = migra_category, y = percentage, fill = migra_category)) +
geom_bar(stat = "identity") +
facet_wrap(~ group_sisben) +
labs(
title = "Percentage of Each Migra Category by Poverty Group",
x = "Migra Category",
y = "Percentage",
fill = "Migra Category"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),    # Remove x-axis labels
axis.ticks.x = element_blank()    # Remove x-axis ticks
)
country_migration_sex = clean_numeric_data %>%
group_by(migra_2_bl) %>%
filter(!is.na(migra_2_bl)) %>%
summarize(total_responses = n(),
percent_female = sum(sex_sisben == 1) / total_responses * 100,
percent_male = 100 - percent_female
)
country_migration_sex
country_migration_sex_long <- country_migration_sex %>%
pivot_longer(
cols = starts_with("percent"),
names_to = "sex",
values_to = "percentage"
)
# Plot the bar chart
ggplot(country_migration_sex_long, aes(x = as.factor(migra_2_bl), y = percentage, fill = sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Percentage of Responses by Sex for Each Migration Category",
x = "Migration Category",
y = "Percentage",
fill = "Sex"
) +
theme_minimal()
country_sex_migration = clean_numeric_data %>%
group_by(sex_sisben) %>%
filter(!is.na(migra_2_bl)) %>%
summarize(total_respondents = n(),
percent_migra_1 = sum(migra_2_bl == 1) / total_respondents * 100,
percent_migra_3 = sum(migra_2_bl == 3) / total_respondents * 100,
percent_migra_4 = sum(migra_2_bl == 4) / total_respondents * 100,
percent_migra_5 = sum(migra_2_bl == 5) / total_respondents * 100,
percent_migra_6 = sum(migra_2_bl == 6) / total_respondents * 100,
percent_migra_7 = sum(migra_2_bl == 7) / total_respondents * 100,
percent_migra_8 = sum(migra_2_bl == 8) / total_respondents * 100,
)
country_sex_migration
country_sex_migration_long <- country_sex_migration %>%
pivot_longer(
cols = starts_with("percent_migra"),
names_to = "migra_category",
values_to = "percentage"
)
# Plot the bar chart
ggplot(country_sex_migration_long, aes(x = migra_category, y = percentage, fill = migra_category)) +
geom_bar(stat = "identity") +
facet_wrap(~ sex_sisben) +
labs(
title = "Percentage of Each Migra Category by Sex",
x = "Migra Category",
y = "Percentage",
fill = "Migra Category"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),    # Remove x-axis labels
axis.ticks.x = element_blank()    # Remove x-axis ticks
)
country_migration_age = clean_numeric_data %>%
group_by(migra_2_bl) %>%
filter(!is.na(migra_2_bl)) %>%
summarize(total_responses = n(),
percent_18_30 = sum(age_cat_sisben == 1) / total_responses * 100,
percent_30_40 = sum(age_cat_sisben == 2) / total_responses * 100,
percent_40_45 = sum(age_cat_sisben == 3) / total_responses * 100,
percent_45_up = sum(age_cat_sisben == 4) / total_responses * 100
)
country_migration_age
country_migration_age_long <- country_migration_age %>%
pivot_longer(
cols = starts_with("percent"),
names_to = "age",
values_to = "percentage"
)
# Plot the bar chart
ggplot(country_migration_age_long, aes(x = as.factor(migra_2_bl), y = percentage, fill = age)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Percentage of Responses by Age for Each Migration Category",
x = "Migration Category",
y = "Percentage",
fill = "Age"
) +
theme_minimal()
country_age_migration = clean_numeric_data %>%
group_by(age_cat_sisben) %>%
filter(!is.na(migra_2_bl)) %>%
summarize(total_respondents = n(),
percent_migra_1 = sum(migra_2_bl == 1) / total_respondents * 100,
percent_migra_3 = sum(migra_2_bl == 3) / total_respondents * 100,
percent_migra_4 = sum(migra_2_bl == 4) / total_respondents * 100,
percent_migra_5 = sum(migra_2_bl == 5) / total_respondents * 100,
percent_migra_6 = sum(migra_2_bl == 6) / total_respondents * 100,
percent_migra_7 = sum(migra_2_bl == 7) / total_respondents * 100,
percent_migra_8 = sum(migra_2_bl == 8) / total_respondents * 100,
)
country_age_migration
country_age_migration_long <- country_age_migration %>%
pivot_longer(
cols = starts_with("percent_migra"),
names_to = "migra_category",
values_to = "percentage"
)
# Plot the bar chart
ggplot(country_age_migration_long, aes(x = migra_category, y = percentage, fill = migra_category)) +
geom_bar(stat = "identity") +
facet_wrap(~ age_cat_sisben) +
labs(
title = "Percentage of Each Migra Category by Age",
x = "Migra Category",
y = "Percentage",
fill = "Migra Category"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),    # Remove x-axis labels
axis.ticks.x = element_blank()    # Remove x-axis ticks
)
summary(lm(meta_stereo_el ~ social_media_usage_instagram_bl +
social_media_usage_facebook_bl +
social_media_usage_tiktok_bl +
social_media_usage_twitter_bl +
social_media_usage_whatsapp_bl +
age_sisben +
sex_sisben +
education_lvl_sisben +
nationality, data=clean_numeric_data))
clean_numeric_data %>%
ggplot(aes(x=darien_bl)) +
geom_histogram()
clean_numeric_data %>%
group_by(nationality) %>%
mutate(mean_darien_bl = mean(darien_bl, na.rm = TRUE)) %>%
ggplot(aes(x = darien_bl)) +
geom_histogram() +
geom_vline(aes(xintercept = mean_darien_bl), color = "red", linetype = "dashed") +
facet_wrap(~nationality) +
labs(title = "Distribution of Darien_BL by Nationality",
x = "Darien_BL",
y = "Count") +
theme_minimal()
summary(lm(darien_bl ~ social_media_usage_instagram_bl +
social_media_usage_facebook_bl +
social_media_usage_twitter_bl +
social_media_usage_whatsapp_bl +
social_media_usage_tiktok_bl +
age_sisben +
group_sisben +
sex_sisben +
education_lvl_sisben +
nationality, data=clean_numeric_data))
clean_numeric_data %>%
group_by(nationality) %>%
mutate(mean_belief_1 = mean(belief_migrate_1_bl, na.rm = TRUE)) %>%
ggplot(aes(x = belief_migrate_1_bl)) +
geom_histogram() +
geom_vline(aes(xintercept = mean_belief_1), color = "red", linetype = "dashed") +
facet_wrap(~nationality) +
labs(title = "Distribution of Migration Belief 1 by Nationality",
x = "People crossing Darien robbed 0-100",
y = "Count") +
theme_minimal()
summary(lm(belief_migrate_1_bl ~ social_media_usage_instagram_bl +
social_media_usage_facebook_bl +
social_media_usage_twitter_bl +
social_media_usage_whatsapp_bl +
social_media_usage_tiktok_bl +
age_sisben +
group_sisben +
sex_sisben +
education_lvl_sisben +
nationality, data=clean_numeric_data))
clean_numeric_data %>%
group_by(nationality) %>%
mutate(mean_belief_2 = mean(belief_migrate_2_bl, na.rm = TRUE)) %>%
ggplot(aes(x = belief_migrate_2_bl)) +
geom_histogram() +
geom_vline(aes(xintercept = mean_belief_2), color = "red", linetype = "dashed") +
facet_wrap(~nationality) +
labs(title = "Distribution of Migration Belief 2 by Nationality",
x = "People crossing Darien injured or dead 0-100",
y = "Count") +
theme_minimal()
summary(lm(belief_migrate_2_bl ~ social_media_usage_instagram_bl +
social_media_usage_facebook_bl +
social_media_usage_twitter_bl +
social_media_usage_whatsapp_bl +
social_media_usage_tiktok_bl +
age_sisben +
group_sisben +
sex_sisben +
education_lvl_sisben +
nationality, data=clean_numeric_data))
clean_numeric_data %>%
group_by(nationality) %>%
mutate(mean_difficulty = mean(difficulty_bl, na.rm = TRUE)) %>%
ggplot(aes(x = difficulty_bl)) +
geom_histogram() +
geom_vline(aes(xintercept = mean_difficulty), color = "red", linetype = "dashed") +
facet_wrap(~nationality) +
labs(title = "Distribution of Perception of Danger of Migration by Nationality",
x = "Perception of Dangers of the Migration Journey",
y = "Count") +
theme_minimal()
summary(lm(difficulty_bl ~ social_media_usage_instagram_bl +
social_media_usage_facebook_bl +
social_media_usage_twitter_bl +
social_media_usage_whatsapp_bl +
social_media_usage_tiktok_bl +
age_sisben +
group_sisben +
sex_sisben +
education_lvl_sisben +
nationality, data=clean_numeric_data))
clean_numeric_data %>%
group_by(nationality) %>%
mutate(mean_democracy_1 = mean(democracy_1_bl, na.rm = TRUE)) %>%
ggplot(aes(x = democracy_1_bl)) +
geom_histogram() +
geom_vline(aes(xintercept = mean_democracy_1), color = "red", linetype = "dashed") +
facet_wrap(~nationality) +
labs(title = "Distribution of Democracy Beliefs by Nationality",
x = "Agreement",
y = "Count") +
theme_minimal()
summary(lm(democracy_1_bl ~ social_media_usage_instagram_bl +
social_media_usage_facebook_bl +
social_media_usage_twitter_bl +
social_media_usage_whatsapp_bl +
social_media_usage_tiktok_bl +
age_sisben +
group_sisben +
sex_sisben +
education_lvl_sisben +
nationality, data=clean_numeric_data))
clean_numeric_data %>%
group_by(nationality) %>%
mutate(mean_democracy_2 = mean(democracy_2_bl, na.rm = TRUE)) %>%
ggplot(aes(x = democracy_2_bl)) +
geom_histogram() +
geom_vline(aes(xintercept = mean_democracy_2), color = "red", linetype = "dashed") +
facet_wrap(~nationality) +
labs(title = "Distribution of Democracy Beliefs by Nationality",
x = "Agreement",
y = "Count") +
theme_minimal()
summary(lm(democracy_2_bl ~ social_media_usage_instagram_bl +
social_media_usage_facebook_bl +
social_media_usage_twitter_bl +
social_media_usage_tiktok_bl +
social_media_usage_whatsapp_bl +
age_sisben +
group_sisben +
sex_sisben +
education_lvl_sisben +
nationality, data=clean_numeric_data))
describe = function(col_name){
clean_numeric_data %>%
group_by(nationality) %>%
summary(mean = mean(col_name),
std = sd(col_name),
min = min(col_name),
max = max(col_name),
obs = n() - is.na(col_name))
}
describe(Age)
describe("Age")
describe = function(col_name){
data = clean_numeric_data %>%
group_by(nationality) %>%
summary(mean = mean(col_name),
std = sd(col_name),
min = min(col_name),
max = max(col_name),
obs = n() - is.na(col_name))
return(data)
}
describe("Age")
data %>%
group_by(nationality) %>%
summarise(across(
where(is.numeric),
list(
mean = ~ mean(.x, na.rm = TRUE),
std = ~ sd(.x, na.rm = TRUE),
min = ~ min(.x, na.rm = TRUE),
max = ~ max(.x, na.rm = TRUE),
obs = ~ sum(!is.na(.x))
),
.names = "{col}_{fn}"
))
describe_all(clean_numeric_data)
describe_all = function(data) {
data %>%
group_by(nationality) %>%
summarise(across(
where(is.numeric),
list(
mean = ~ mean(.x, na.rm = TRUE),
std = ~ sd(.x, na.rm = TRUE),
min = ~ min(.x, na.rm = TRUE),
max = ~ max(.x, na.rm = TRUE),
obs = ~ sum(!is.na(.x))
),
.names = "{col}_{fn}"
))
}
describe_all(clean_numeric_data)
# Load packages used in this session of R
library(tidyverse)
library(knitr)
library(readxl) # Package to read Excel data
library(MatchIt)
data = read.csv("../data/cleaned_data/merged_data.csv")
data = read.csv(file = "../data/cleaned_data/merged_data.csv")
setwd("~/Documents/datasci1/ds_finalproject/code")
data = read.csv(file = "../data/cleaned_data/merged_data.csv")
data = read.csv(file = "../data/cleaned data/merged_data.csv")
pwd
data = read.csv(file = "../data/cleaned data/merged_data.csv")
data = read.csv(file = "../data/cleaned data/merged_data.csv")
data = drop_na(data)
View(data)
data = data %>%
mutate(treatment = In_Person > median(In_Person).asnumeric())
data = data %>%
mutate(treatment = In_Person > median(In_Person))
View(data)
data = data %>%
mutate(treatment = as.numeric(In_Person > median(In_Person)))
matchit_result = matchit.matchit(treatment ~ NumberofSchools + DistrictEnrollment + PercentofGiftedStudents +
CharterSchoolEnrollment + GeographicSizeofDistrict + AmericanIndian_AlaskanNative + Asian + NativeHawaiianorotherPacificIslander +
Black + Hispanic + White + TwoOrMoreRaces + EconomicallyDisadvantaged + EnglishLearner + SpecialEducation + Female + Male + Homeless +
MilitaryConnected + perc_unconnected_students + Latitude + Longitude, data=data, method="nearest")
matchit_result = MatchIt.matchit(treatment ~ NumberofSchools + DistrictEnrollment + PercentofGiftedStudents +
CharterSchoolEnrollment + GeographicSizeofDistrict + AmericanIndian_AlaskanNative + Asian + NativeHawaiianorotherPacificIslander +
Black + Hispanic + White + TwoOrMoreRaces + EconomicallyDisadvantaged + EnglishLearner + SpecialEducation + Female + Male + Homeless +
MilitaryConnected + perc_unconnected_students + Latitude + Longitude, data=data, method="nearest")
matchit_result <- MatchIt::matchit(
treatment ~ NumberofSchools +
DistrictEnrollment +
PercentofGiftedStudents +
CharterSchoolEnrollment +
GeographicSizeofDistrict +
AmericanIndian_AlaskanNative +
Asian +
NativeHawaiianorotherPacificIslander +
Black +
Hispanic +
White +
TwoOrMoreRaces +
EconomicallyDisadvantaged +
EnglishLearner +
SpecialEducation +
Female +
Male +
Homeless +
MilitaryConnected +
perc_unconnected_students +
Latitude +
Longitude,
data = data,
method = "nearest"
)
View(matchit_result)
matched_data = MatchIt::get_matches(matchit_result)
View(matched_data)
matched_data = MatchIt::get_matches(matchit_result)
matched_data.to_csv("../data/cleaned data/matched_data_fromR.csv")
?write.csv
write.csv(matched_data, "../data/cleaned data/matched_data_fromR.csv")
View(data)
